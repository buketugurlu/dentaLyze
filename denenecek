import os
import yaml
import cv2
import torch
from ultralytics import YOLO
import albumentations as A

# GPU Kullanımı
torch.cuda.empty_cache()

# Gelişmiş Augmentasyon Stratejisi
def advanced_augmentation():
    return A.Compose([
        A.RandomBrightnessContrast(p=0.3),
        A.HorizontalFlip(p=0.5),
        A.ShiftScaleRotate(
            shift_limit=0.1, 
            scale_limit=0.2, 
            rotate_limit=30, 
            p=0.7
        ),
        A.RandomGamma(p=0.3),
        A.GaussNoise(p=0.2),
        A.ElasticTransform(
            alpha=1, 
            sigma=50, 
            alpha_affine=50, 
            p=0.3
        ),
        A.CoarseDropout(
            max_holes=8, 
            max_height=64, 
            max_width=64, 
            fill_value=0, 
            p=0.5
        )
    ])

# Gelişmiş Model Eğitim Fonksiyonu
def train_advanced_model():
    # Farklı modeller deneyebilirsiniz
    model_variants = ['yolov8n.pt', 'yolov8s.pt']
    best_map = 0
    best_model = None

    for model_variant in model_variants:
        model = YOLO(model_variant)
        
        # Gelişmiş eğitim parametreleri
        results = model.train(
            data=dataset_yaml_path,
            epochs=200,  # Epoch sayısını artırdık
            batch=8,     # Batch boyutunu optimize ettik
            imgsz=640,   # Görüntü boyutu
            patience=30, # Erken durdurma için bekleme süresi
            workers=4,   # Paralelleştirme
            device=0,    # GPU kullanımı
            name='dental_detection_advanced',
            plots=True,
            project='C:/Users/Kullanıcı/Desktop/dentalyze_jupyter3',
            
            # Gelişmiş optimizasyon parametreleri
            optimizer='Adam',  # Farklı optimizatör
            lr0=0.001,         # Öğrenme oranı
            lrf=0.01,          # Son öğrenme oranı
            weight_decay=0.0005,
            warmup_epochs=3,
            
            # Sınıf ağırlıklandırması
            class_weights=[1.0, 1.5, 1.2, 1.3, 1.4, 1.1]  # Dengesiz sınıflar için
        )

        # mAP50-95 değerini kontrol et
        current_map = results.results_dict['metrics/mAP50-95']
        if current_map > best_map:
            best_map = current_map
            best_model = model

    return best_model

# Predict fonksiyonunu geliştirme
def advanced_predict():
    model_path = 'C:/Users/Kullanıcı/Desktop/dentalyze_jupyter3/dental_detection_advanced/weights/best.pt'
    
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"Model dosyası bulunamadı: {model_path}")
    
    model = YOLO(model_path)
    results = model.predict(
        source='C:/Users/Kullanıcı/Desktop/dentalyze_jupyter3/Dental OPG XRAY Dataset/Augmented_Data/test/images',
        conf=0.3,      # Güven eşiğini artırdık
        iou=0.5,       # IoU eşiği
        agnostic_nms=True,  # Sınıf bağımsız non-max suppression
        max_det=300,   # Maksimum tespit sayısı
        save=True,
        save_txt=True,
        save_conf=True,
        device=0  # GPU kullanımı
    )
    return results

# Ana çalıştırma
print("Gelişmiş eğitim başlatılıyor...")
best_model = train_advanced_model()
print("Tahmin başlatılıyor...")
results = advanced_predict()
print("İşlem tamamlandı.")
